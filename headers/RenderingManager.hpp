#ifndef RENDERINGMANAGER_HPP
#define RENDERINGMANAGER_HPP

	#include "utils.hpp"
	#include "SSDataBridge.hpp"
	#include "ShaderSources.hpp"

	#include "RenderText.hpp"
	#include "RenderMesh.hpp"
	#include "RenderTriangle.hpp"
	#include "RenderRectangle.hpp"

	#include "CustomString.hpp"

	/// Define all rendering element type
	/// that can be generated by the Manager.
	enum ShapeType
	{
		RM_SHAPE_MESH = 0,
		RM_SHAPE_TRIANGLE,
		RM_SHAPE_RECTANGLE,
		RM_SHAPE_NUMBER
	};

	class RenderingManager
	{
		public:
			/// Constructor.
			RenderingManager();

			///  Empty constructor.
			RenderingManager(void*);

			/// Destructor.
			~RenderingManager();

			/// Allows to clean the RenderingManager.
			void clean(void);

			/// Set the current font by passing his id.
			void setCurrentFont(unsigned int const);

			/// Add a new font from a given source file.
			void addNewFont(char const* const);

			/// Get the specified RenderText.
			RenderText* getRenderText(char const* const);

			/// Add a new RenderText. An id must be given.
			void addNewRenderText(char const* const);

			/// Allows to choose the current ShaderProgram.
			void setCurrentShaderProgram(unsigned int const);

			/// Add a new ShaderProgram to the RenderingManager,
			/// and set the current ShaderProgram.
			void addNewShaderProgram(ShaderSources&);

			/// Add a new RenderShape according to the given ShapeType.
			void addNewShape(ShapeType const);

			/// Add a new RenderMesh loaded from the given file.
			void addNewMesh(char const* const);

			/// Add a new textured mesh from the given file.
			void addNewTexturedMesh(char const* const, CustomString const);

			/// Call the draw process.
			void draw(void);

			///
			vector<RenderShape*>* getShapes(void);

		private:
			///@{
			/// GL_STATIC_DRAW buffers.
			static GLuint vbuffers[];

			static GLuint uvbuffers[];
			///@}

			///
			RenderShape* currentshape;

			/// Current ShaderProgram to be used.
			ShaderProgram* currentshader;

			/// ShaderProgram stack.
			vector<ShaderProgram*> shaders;

			/// RenderShape stack.
			vector<RenderShape*> shapes;

			///
			map<string, RenderText*> texts;

			/// Current font to be used.
			FTGLPixmapFont* currentfont;
			
			/// Font stack.
			vector<FTGLPixmapFont*> fonts;

			/// Current file name using by the RenderingManager.
			char const* currentfilename;

			/// Draw all RenderText that was added.
			void drawText(void);

			/// Draw all RenderShape that was added.
			void drawShapes(void);

			/// Add a new Buffered RenderShape according to the given ShapeType.
			void addNewBufferedShape(ShapeType const);

			/// Create and return a new buffered RenderShape. 
			RenderShape* getNewBufferedShape(ShapeType const);

			/// Return a new RenderShape indicated by the given ShapeType.
			RenderShape* getNewShape(ShapeType const);

	};

#endif
