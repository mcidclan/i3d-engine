#ifndef RENDERINGMANAGER_HPP
#define RENDERINGMANAGER_HPP

	#include "utils.hpp"
	#include "RenderTriangle.hpp"
	#include "RenderRectangle.hpp"

	///
	/// Define all rendering element type
	/// that can be generated by the Manager.
	///
	enum ShapeType
	{
		RM_SHAPE_TRIANGLE = 0,
		RM_SHAPE_RECTANGLE,
		RM_SHAPE_NUMBER
	};

	class RenderingManager
	{
		public:
			///
			/// Constructor.
			///
			RenderingManager();

			///
			/// Destructor.
			///
			~RenderingManager();

			///
			/// Add a new RenderShape according to the given ShapeType.
			///
			void addNewBufferedShape(ShapeType const);

			///
			/// Call the draw process.
			///
			static void draw(void);

		private:
			///  
			///	Allows access to the current instance,
			/// from static functions.
			///
			static RenderingManager* current;

			///
			/// GL_STATIC_DRAW buffers.
			///
			static GLuint buffers[];

			///
			/// RenderShape stack.
			///
			vector<RenderShape*> shapes;

			///
			/// Draw all RenderShape that was added.
			///
			void drawShape(void);

			///
			/// Create and return a new buffered RenderShape. 
			///
			RenderShape* getNewBufferedShape(ShapeType const);

			///
			/// Return a new RenderShape indicated by the given ShapeType.
			///
			RenderShape* getNewShape(ShapeType const);
	};

#endif
